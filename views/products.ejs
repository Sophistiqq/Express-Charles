<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manage Products</title>

  <link rel="stylesheet" href="css/index.css">
  <link rel="stylesheet" href="css/global.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>

<body>
  <div class="top-bar">
    <h1>Admin Dashboard</h1>
  </div>
  <main>
    <nav class="nav">
      <a href="/"><i class="fas fa-chart-line"></i> Sales Overview</a>
      <a href="/customers"><i class="fas fa-users"></i> Customers View</a>
      <a href="/products" class="active"><i class="fas fa-box-open"></i> Product Management</a>
      <a href="/orders"><i class="fas fa-shopping-cart"></i> Order Management</a>
    </nav>
    <div class="content">
      <div class="content-header">
        <h2>Product Management</h2>
<button class="btn" id="add-product" onclick="openModal()">Add Product</button>
      </div>
      <div class="search-bar">
        <input type="text" placeholder="Search for product" id="searchInput">
        <button onclick="searchProduct()"><i class="fas fa-search"></i></button>
      </div>
      <div class="content-body">
        <table>
          <thead>
            <tr>
              <th onclick="sortTable(0)">Product ID <span class="sort-icon"></span></th>
              <th onclick="sortTable(1)">Product Name <span class="sort-icon"></span></th>
              <th onclick="sortTable(2)">Price <span class="sort-icon"></span></th>
              <th onclick="sortTable(3)">Stock <span class="sort-icon"></span></th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% products.forEach(product => { %>
              <tr>
                <td><%= product.id %></td>
                <td><%= product.name%></td>
                <td><%= product.price %></td>
                <td><%= product.stock %></td>
                <td class="action-buttons">
                  <button class="btn" onclick="openModal(<%= product.id %>)">Edit</button>
                  <button class="btn" onclick="deleteProduct(<%= product.id %>)">Delete</button>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    </div>
  </main>

  <div id="productModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeModal()">&times;</span>
      <h2 id="modalTitle">Add Product</h2>
      <form id="productForm">
        <input type="hidden" id="productId">
        <div>
          <label for="productName">Product Name:</label>
          <input type="text" id="productName" name="name" required>
        </div>
        <div>
          <label for="productPrice">Price:</label>
          <input type="number" id="productPrice" name="price" required>
        </div>
        <div>
          <label for="productStock">Stock:</label>
          <input type="number" id="productStock" name="stock" required>
        </div>
        <button type="submit">Save</button>
      </form>
    </div>
  </div>
</body>
<style>
  table {
    width: 100%;
    border-collapse: collapse;

    th {
      background-color: #f2f2f2;
      white-space: nowrap;
    }

    th,
    td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
      cursor: pointer;
    }

    tr:nth-child(even) {
      background-color: #f2f2f2;
    }
  }
  .content {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .sort-icon {
    margin-left: 5px;
  }

  .asc::before {
    content: "\25B2"; /* Up arrow */
  }

  .desc::before {
    content: "\25BC"; /* Down arrow */
  }
  .action-buttons {
    display: flex;
    gap: 10px;
    justify-content: center;
  }

  .search-bar {
    margin-bottom: 20px;
    input {
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      width: 40%;
      margin-right: 10px;
    }
    button {
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      background-color: #f2f2f2;
    }
  }
  
  .modal {
    display: none;
    position: fixed;
    z-index: 1;
    inset: 0;
    place-items: center;
    width: 100vw;
    height: 100vh;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 20px;
    padding: 20px;
    background-color: white;
    border-radius: 5px;
  }

  .close {
    align-self: flex-end;
    font-size: 36px;
    cursor: pointer;
  }

  .btn {
    padding: 5px 15px;
    border: none;
    border-radius: 5px;
    background-color: var(--primary);
    color: white;
    cursor: pointer;
  }

  .btn:hover {
    background-color: var(--primary-hover);
  }
  #add-product {
    margin-block: 20px;
    padding: .5rem 1.5rem;
  }

</style>
<script>

function sortTable(columnIndex) {
  const table = document.querySelector("table");
  const rows = Array.from(table.rows).slice(1);
  let isAscending = table.getAttribute("data-sort-dir") !== "asc";

  rows.sort((rowA, rowB) => {
    const cellA = rowA.cells[columnIndex].textContent.trim();
    const cellB = rowB.cells[columnIndex].textContent.trim();

    const a = isNaN(cellA) ? cellA.toLowerCase() : parseFloat(cellA);
    const b = isNaN(cellB) ? cellB.toLowerCase() : parseFloat(cellB);

    return isAscending ? (a > b ? 1 : -1) : (a < b ? 1 : -1);
  });

  table.setAttribute("data-sort-dir", isAscending ? "asc" : "desc");
  rows.forEach(row => table.appendChild(row));

  // Clear existing icons
  document.querySelectorAll(".sort-icon").forEach(icon => {
    icon.classList.remove("asc", "desc");
  });
  
  // Set new icon based on direction
  const header = table.rows[0].cells[columnIndex];
  header.querySelector(".sort-icon").classList.add(isAscending ? "asc" : "desc");
}


  function searchProduct() {
    // Declare variables
    var input, filter, table, tr, td, i, txtValue;
    input = document.getElementById("searchInput");
    filter = input.value.toUpperCase();
    table = document.querySelector("table");
    tr = table.getElementsByTagName("tr");

    // Loop through all table rows, and hide those who don't match the search query
    for (i = 0; i < tr.length; i++) {
      td = tr[i].getElementsByTagName("td")[1];
      if (td) {
        txtValue = td.textContent || td.innerText;
        if (txtValue.toUpperCase().indexOf(filter) > -1) {
          tr[i].style.display = "";
        } else {
          tr[i].style.display = "none";
        }
      }
    }
  }


    const modal = document.getElementById("productModal");
    const form = document.getElementById("productForm");
    const modalTitle = document.getElementById("modalTitle");
    const productIdInput = document.getElementById("productId");
    const productNameInput = document.getElementById("productName");
    const productPriceInput = document.getElementById("productPrice");
    const productStockInput = document.getElementById("productStock");

    function openModal(productId = null) {
      console.log("Clicked");
      if (productId) {
        // Fetch product data and populate the form
        fetch(`/api/products/${productId}`)
          .then(response => response.json())
          .then(product => {
            modalTitle.textContent = "Edit Product";
            productIdInput.value = product.id;
            productNameInput.value = product.name;
            productPriceInput.value = product.price;
            productStockInput.value = product.stock;
          });
      } else {
        modalTitle.textContent = "Add Product";
        form.reset();
        productIdInput.value = "";
      }
      modal.style.display = "grid";
    }

    function closeModal() {
      modal.style.display = "none";
    }

form.addEventListener("submit", function(event) {
  event.preventDefault();
  const productId = productIdInput.value;
  const url = productId ? `/api/products/${productId}` : "/api/products";
  const method = productId ? "PUT" : "POST";
  const formData = new FormData(form);
  const data = Object.fromEntries(formData.entries());

  fetch(url, {
    method: method,
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(data)
  })
  .then(response => response.json())
  .then(result => {
    closeModal();
    location.reload(); // Reload the page to see the changes
  });
});

    function deleteProduct(productId) {
      if (confirm("Are you sure you want to delete this product?")) {
        fetch(`/api/products/${productId}`, {
          method: "DELETE"
        })
        .then(response => response.json())
        .then(result => {
          location.reload(); // Reload the page to see the changes
        });
      }
    }

    // Close the modal when clicking outside of it
    window.onclick = function(event) {
      if (event.target == modal) {
        closeModal();
      }
    }

</script>
</html>

